#!/usr/bin/python

from xml.dom import minidom
import shutil, os

def write_note(output):
    output.writelines("/*This file is generated by auto_codes.py.*/\n\n")

def get_record_width_struct_name(record_name):
    return (record_name + "_width").capitalize()

def get_metadata(filename='metadata.xml'):
    doc = minidom.parse(filename)
    root = doc.documentElement

    record_nodes = root.getElementsByTagName('record')
    record_list = []
    for record_node in record_nodes:
        record_name = record_node.getAttribute('name')
        fields_node = record_node.getElementsByTagName('field')

        field_list = []
        for field_node in fields_node:
            field_name = field_node.getAttribute('name')
            field_type = field_node.getAttribute('type')
            field_data = {"name":field_name, "type":field_type}
            field_list.append(field_data)
        record_data = {"name":record_name, "field_list":field_list}
        record_list.append(record_data);
    return record_list

def gen_auto_metadata_h(record_list):
    output = open('_auto_metadata.h', 'w')
    write_note(output)
    codes_list = []
    codes_list.append('#ifndef __AUTO_METADATA_H__\n')
    codes_list.append('#define __AUTO_METADATA_H__\n\n')

    codes_list.append('#include <memory.h>\n')
    for record_data in record_list:
        struct_name = get_record_width_struct_name(record_data['name'])

        codes_list.append("typedef struct _" + struct_name +  " {\n")
        field_list = record_data['field_list']
        for field_data in field_list:
            codes_list.append("\tint " + field_data['name'] + ";\n")


        codes_list.append("}" + struct_name + ";");
        codes_list.append("\n\n")

    for record_data in record_list:
        function_name = "set_" + record_data['name'] + "_width"
        struct_name = get_record_width_struct_name(record_data['name'])
        parameter = "T& md_helper,\n\t";
        parameter += struct_name + " & " + "record_width"
        codes_list.append("template <class T>\n")
        codes_list.append("void " + function_name + "(" + parameter + ") {\n")
        codes_list.append("\tmd_helper.set_current_metadata_record(\"" + record_data['name'] + "\");\n")
        codes_list.append("\tmemset(&record_width, 0x00, sizeof("+ struct_name +"));\n")
        codes_list.append("\n")

        field_list = record_data['field_list']
        for field_data in field_list:
            codes_list.append("\trecord_width." + field_data['name'] + " = md_helper.get_width(\"" + field_data['name'] + "\");\n")
        codes_list.append('}\n\n')

    codes_list.append("\n")
    codes_list.append('#endif //End __AUTO_METADATA_H__\n')
    output.writelines(codes_list)
    output.close()

record_list = get_metadata()
gen_auto_metadata_h(record_list)
shutil.copyfile('_auto_metadata.h', '../include/_auto_metadata.h')
shutil.copyfile('_auto_metadata.h', '../../binary_xmlresource/include/_auto_metadata.h')
os.remove('_auto_metadata.h')

print '\n'
print '----MESSAGE-----\n'
print '_auto_metadata.h is generated in ../include/_auto_metadata.h successfully\n'
print '_auto_metadata.h is generated in ../../binary_xmlresource/include/_auto_metadata.h successfully\n'
